name: Exportar Imágenes de la NASA

on:
  push:
    branches:
      - main

jobs:
  cargar_fechas:
    runs-on: ubuntu-latest
    outputs:
      fechas: ${{ steps.cargar_fechas.outputs.fechas }}
    steps:
      - name: Revisar el repositorio
        uses: actions/checkout@v4

      - name: Cargar fechas desde JSON
        id: cargar_fechas
        run: |
          fechas=$(jq -c '.dates' dates.json)
          echo "fechas=${fechas}" >> $GITHUB_OUTPUT

  exportar_imagenes:
    runs-on: ubuntu-latest
    needs: cargar_fechas
    strategy:
      matrix:
        fecha: ${{ fromJson(needs.cargar_fechas.outputs.fechas) }} # Criterio 3 Los paralelos son dinámicos
    continue-on-error: true # Criterio 1 Si falla un paralelo, los demás siguen
    steps:
      - name: Revisar el repositorio
        uses: actions/checkout@v4

      - name: Crear directorio de caché
        run: mkdir -p cache

      - name: Usar caché para la respuesta de la API
        uses: actions/cache@v4
        with:
          path: cache
          key: nasa-api-${{ matrix.fecha }}
          restore-keys: |
            nasa-api-

      - name: Obtener URL de la imagen #Criterio 2 El cache almacena la fecha y salta la consulta al API cuando la encuentra
        id: obtener_url
        run: |
          fecha="${{ matrix.fecha }}"
          echo "Procesando fecha: $fecha"
          cache_file="cache/${fecha}.json"
          if [ -f "$cache_file" ]; then
            echo "Usando datos en caché para la fecha: $fecha"
            url=$(jq -r '.url' "$cache_file")
          else
            echo "Llamando a la API de NASA para la fecha: $fecha"
            response=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.NASA_API_KEY }}&date=${fecha}")
            echo "$response" > "$cache_file"
            url=$(echo "$response" | jq -r '.url')
          fi

          if [ "$url" != "null" ] && [ -n "$url" ]; then
            echo "URL de la imagen: $url"
            echo "url=$url" >> $GITHUB_ENV 
          else
            echo "No se encontró imagen para la fecha: $fecha"
            exit 0
          fi
        #Criterio 5 En este step que finalizó utiliza el api key almacenado como NASA_API_KEY en los secretos del repositorio

      - name: Imprimir URL de la imagen
        run: |
          echo "URL de la imagen a descargar: ${{ env.url }}"

      - name: Descargar imagen desde la URL
        uses: minituff/save-image@v1.4 #Criterio 4 El action buscado y encontrado fue el de save-image
        with:
          url: ${{ env.url }} 
          imagePath: images/img-${{ matrix.fecha }}.jpg

      - name: Verificar imagen descargada
        run: |
          if [[ ! -f "images/img-${{ matrix.fecha }}.jpg" ]]; then
            echo "Error: La imagen no fue descargada correctamente."
            exit 1
          fi

      - name: Subir imágenes como artefactos
        uses: actions/upload-artifact@v4
        with:
          name: "img-${{ matrix.fecha }}"
          path: images/img-${{ matrix.fecha }}.jpg #Criterio 7 guarda cada imagen en un artefacto y lo nombra img- con la fecha y la extension .jpg
          retention-days: 1 #Criterio 8 los artefactos duran 1 dia 
