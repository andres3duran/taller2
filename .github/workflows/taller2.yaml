name: Export NASA Images

on:
  push:
    branches:
      - main

jobs:
  load_dates:
    runs-on: ubuntu-latest
    outputs:
      dates: ${{ steps.set_dates.outputs.dates }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Load dates from JSON
        id: load_dates
        run: |
          dates=$(jq -r '.dates | @csv' dates.json)  # Convert to CSV format
          echo "dates=${dates}" >> $GITHUB_OUTPUT  # Set the output variable

  export_images:
    runs-on: ubuntu-latest
    needs: load_dates
    strategy:
      matrix:
        date: ${{ fromJson(needs.load_dates.outputs.dates) }}  # Create a matrix from the output
    continue-on-error: true
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Create cache directory
        run: mkdir -p cache

      - name: Validate and Download image for ${{ matrix.date }}
        run: |
          echo "Processing date: ${{ matrix.date }}"
          if [ -f "cache/${{ matrix.date }}.json" ]; then
            echo "Using cached data for date: ${{ matrix.date }}"
            url=$(jq -r '.url' cache/${{ matrix.date }}.json)
          else
            response=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.NASA_API_KEY }}&date=${{ matrix.date }}")
            echo "$response" > "cache/${{ matrix.date }}.json"
            url=$(echo "$response" | jq -r '.url')
          fi
          
          if [ "$url" != "null" ]; then
            echo "Downloading image from $url"
            curl -s -o "images/img-${{ matrix.date }}.jpg" "$url"
          else
            echo "No image found for date: ${{ matrix.date }}"
          fi

      - name: Upload images as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "NASA Images for ${{ matrix.date }}"
          path: images/*
          retention-days: 1
